How to write good commit messages

Using VSCode as your text editor
    (you should have set this up in the Git Basics section)
    will allow you to easily make multi-line commit messages,
    easily see the character length of each line,
    and will allow you to use VSCode spell
    check extensions to make sure your
    spelling is correct

Use an active voice: 
    “Fix card generator”
Avoid using vague commit messages such as
    “saved”
    or “updated”
    as well as "upload"

Commit early and often!

Victory costs, every time..., I pay a little more...

The seven rules of a great Git commit message

    Keep in mind: This has all been said before.

    Separate subject from body with a blank line
    Limit the subject line to 50 characters
    Capitalize the subject line
    Do not end the subject line with a period
    Use the imperative mood in the subject line
    Wrap the body at 72 characters
    Use the body to explain what and why vs. how

    For example:
    Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequences of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789