Introduction: Why good commit messages matter

If you browse the log of any random
Git repository, you will probably
find its commit messages are more or
less a mess. For example, take a
look at these gems from my early
days committing to Spring:

e5f4b49 Re-adding ConfigurationPostProcessorTests after its brief removal in r814. @Ignore-ing the testCglibClassesAreLoadedJustInTimeForEnhancement() method as it turns out this was one of the culprits in the recent build breakage. The classloader hacking causes subtle downstream effects, breaking unrelated tests. The test method is still useful, but should only be run on a manual basis to ensure CGLIB is not prematurely classloaded, and should not be run as part of the automated build.
2db0f12 fixed two build-breaking issues: + reverted ClassMetadataReadingVisitor to revision 794 + eliminated ConfigurationPostProcessorTests until further investigation determines why it causes downstream tests to fail (such as the seemingly unrelated ClassPathXmlApplicationContextTests)
147709f Tweaks to package-info.java files
22b25e0 Consolidated Util and MutableAnnotationUtils classes into existing AsmUtils
7f96f57 polishing

Yikes. Compare that with these more recent commits from the same repository:

$ git log --oneline -5 --author pwebb --before "Sat Aug 30 2014"
5ba3db6 Fix failing CompositePropertySourceTests
84564a0 Rework @PropertySource early parsing logic
e142fd1 Add tests for ImportSelector meta-data
887815f Update docbook dependency and generate epub
ac8326d Polish mockito usage

Which would you rather read?

The former varies in length and form;
the latter is concise and consistent.

The former is what happens by default;
the latter never happens by accident.

While many repositories’ logs look like the former,
there are exceptions. The Linux kernel and Git
itself are great examples. Look at Spring Boot,
or any repository managed by Tim Pope.

A properly formed Git commit subject line
should always be able to complete the following sentence:

If applied, this commit **will** <your subject line here>:

For example:
    If applied, this commit will refactor subsystem X for readability
    If applied, this commit will update getting started documentation
    If applied, this commit will remove deprecated methods
    If applied, this commit will release version 1.0.0
    If applied, this commit will merge pull request #123 from user/branch

Notice how this doesn’t work for the other non-imperative forms:
    If applied, this commit will fixed bug with Y
    If applied, this commit will changing behavior of X
    If applied, this commit will more fixes for broken stuff
    If applied, this commit will sweet new API methods

Remember: Use of the imperative is important only in the subject line. You can relax this restriction when you’re writing the body.

Bonus credit

https://xkcd.com/1296/ by xkcd

Further reading to mastery
https://git-scm.com/book/en/v2